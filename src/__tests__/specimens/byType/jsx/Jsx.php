<?php
/* NOTICE: autogenerated file; Do not edit by hand */
namespace specimens\byType\jsx;
use VK\Elephize\Builtins\RenderableComponent;
use VK\Elephize\Builtins\Stdlib;
use VK\Elephize\Builtins\ReactContext;
use VK\Elephize\Builtins\ReactContextSynthetic;

class Jsx extends RenderableComponent {
    /**
     * @var Jsx $_mod
     */
    private static $_mod;
    public static function getInstance(): Jsx {
        if (!self::$_mod) {
            self::$_mod = new Jsx();
        }
        return self::$_mod;
    }

    private function __construct() {
    }

    /**
     * @param mixed[] $props
     * @param mixed[] $children
     * @return ?string
     */
    public function render(array $props, array $children) {
        $jsxa = $this->frg([
            \VK\Elephize\Builtins\IntrinsicElement::get("div")->render(
                ["id" => \VK\Elephize\Builtins\IntrinsicElement::escape("test")],
                [\VK\Elephize\Builtins\IntrinsicElement::get("b")->render([], ["ololo"]), "test"]
            ),
            \VK\Elephize\Builtins\IntrinsicElement::get("i")->render([], ["test1"]),
        ]);
        $jsxb = \VK\Elephize\Builtins\IntrinsicElement::get("b")->render([], [$jsxa]);
        $jsxprops = [
            "id" => "test",
            "className" => "test2",
        ];
        $jsxc = \VK\Elephize\Builtins\IntrinsicElement::get("div")->render(
            array_merge(
                ["aria-atomic" => true, "title" => \VK\Elephize\Builtins\IntrinsicElement::escape("testtitle")],
                $jsxprops,
                $jsxprops
            ),
            ["Oh my ", $jsxb, " my oh"]
        );
        return $jsxc;
    }
}
